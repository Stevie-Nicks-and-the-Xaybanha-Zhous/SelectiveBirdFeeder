//
// Project:   Smart Bird Feeder
// Author:    Nick Short
// Function:  Controls a smart bird feeder. Actuates a servo in response to an input
//            pulse generated by a comparator attached to a microphone/preamp. Will
//            only actuate servo if a sufficiently heavy--but not too heavy--mass is
//            "perched" on a force sensitive resistor.

#include <Servo.h>

#define WT_MIN        100                 // Minimum "weight"
#define WT_MAX        450                 // Maximum "weight"
#define MIC_PIN       2                   // Microphone pin
#define WEIGHT_PIN    A5                  // Force sensitive resistor pin
#define SERVO_PIN     3                   // Servo pin
#define TRAVEL_ANGLE  90                  // Total travel angle (deg)
#define ANGLE         TRAVEL_ANGLE / 2    // Half travel angle (deg)
#define OPEN_TIME     1500                // Total time open (ms)
#define WAIT_TIME     30000               // Anti-obesity wait time (ms)

Servo myservo;                  // create servo object to control a servo

int weightMeasurement = 0;      // variable to read the value from the analog pin

// Setup routine
void setup() {
  gateServo.attach(SERVO_PIN);  // Attach servo
  pinMode(WEIGHT_PIN, INPUT);   // Configuring input pins
  pinMode(MIC_PIN, INPUT);      //
}

// Main loop
void loop() {
  // Poll for input from the comparator. The comparator generates a pulse stream
  // when presented with sufficiently high intensity sound waves.
  if(digitalRead(MIC_PIN)) {
    // Read the force sensitive resistor
    weightMeasurement = analogRead(WEIGHT_PIN);

    // If the thing on the force sensitive resistor is not too light and not too
    // heavy, cycle the door.
    if( (WT_MIN <= weightMeasurement) && (weightMeasurement <= WT_MAX) ) {
      cycleChuteDoor();
    }
    // Else ignore the rest of the pulse stream (hopefully).
    else delay(250);
  }
}

// Opens, then closes the chute door. The degree to which it opens and the duration
// that it remains open are configurable through TRAVEL_ANGLE and OPEN_TIME.
void cycleChuteDoor() {
  myservo.write(90-ANGLE);
  delay(OPEN_TIME / 2);
  myservo.write(90+ANGLE);
  delay(OPEN_TIME / 2 + WAIT_TIME); // When closed, wait to feed again so birds do
                                    // not end up obese.
}
